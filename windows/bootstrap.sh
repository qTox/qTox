#!/bin/sh

# use this to enable/disable debug output
readonly ENABLE_DEBUG_OUTPUT=false

#robust way of finding out location of current script
WINDOWS_SETUP_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
QTOX_DIR=$WINDOWS_SETUP_SCRIPT_DIR/..

# Generates a "Press any key to continue..."-Message
pause() {
	read -n1 -r -p "Press any key to continue..."
}

# Writes out debug output lines
debug_out() {
	if [[ $ENABLE_DEBUG_OUTPUT = "true" ]]
	then
		echo
		echo "   ###   $1"
		echo
	fi
}
debug_out "Debug output enabled."
debug_out "QTOX_DIR = $QTOX_DIR"

## toxcore
get_toxcore() {
	debug_out "toxcore: Obtaining latest compiled release."
	if [ ! -f "libtoxcore_build_windows_x86_shared_release.zip" ]; then
		wget --no-check-certificate https://build.tox.chat/view/libtoxcore/job/libtoxcore_build_windows_x86_shared_release/lastSuccessfulBuild/artifact/libtoxcore_build_windows_x86_shared_release.zip
		rm -rf include/tox
	fi

	debug_out "toxcore: Unpacking build includes and binaries."
	if [ ! -d "include/tox" ]; then
		unzip -o libtoxcore_build_windows_x86_shared_release.zip -d ./
	fi
}

## libqrencode
get_libqrencode() {
	debug_out "libqrencode: Obtaining version 3.4.4"
	if [ ! -f "qrencode-3.4.4.tar.gz" ]; then
		wget https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz
	fi

	if [ ! -f "qrencode-3.4.4.tar.gz" ]; then
		echo
		echo
		echo "Warning: Could not download libqrencode from fukuchi.org."
		echo "Warning: In the past, there have been certificate issues on that server."
		echo "Warning: Trying again while ignoring certificate errors."
		echo
		echo "Warning: This might be INSECURE."
		echo
		echo
		echo "Do you want to continue?"
		read -p "y/N (yes/no): " read_input
		read_input=$(echo $read_input | tr "[:upper:]" "[:lower:]")
		if [ "$read_input" == "y" ]; then
			debug_out "libqrencode: Obtaining version 3.4.4 without certificate check."
			wget --no-check-certificate https://fukuchi.org/works/qrencode/qrencode-3.4.4.tar.gz
		else
			echo "libqrencode: Download canceled."
			echo "Continuing with next step."
			echo
		fi
	fi

	debug_out "libqrencode: Unpacking"
	if [ ! -d "$QTOX_DIR/libs/qrencode-3.4.4" ]; then
		tar -xvf qrencode-3.4.4.tar.gz
		echo
		rm -rf lib/qrcodelib.dll
		echo
	fi

	debug_out "libqrencode: Configuring and compiling"
	if [ ! -f "lib/libqrencode.a" ]; then
		pushd $QTOX_DIR/libs/qrencode-3.4.4
		
		# their autogen script doesn’t work :)
		#./autogen.sh
		
		# fix autogenerated files
		autoreconf --force --install
		
		./configure --prefix=$QTOX_DIR/libs --without-tests --without-libiconv-prefix --without-tools
		make
		make install
		popd
	fi
}

## OpenAL
get_openal() {
	debug_out "OpenAL: Obtaining version 1.16.0"
	if [ ! -f "openal-soft-1.16.0.tar.bz2" ]; then
		wget http://kcat.strangesoft.net/openal-releases/openal-soft-1.16.0.tar.bz2
		rm -rf openal-soft-1.16.0
	fi

	debug_out "OpenAL: Unpacking"
	if [ ! -d "openal-soft-1.16.0" ]; then
		tar -xvf openal-soft-1.16.0.tar.bz2
		rm bin/OpenAL32.dll
	fi

	debug_out "OpenAL: Configuring and compiling"
	if [ ! -f "bin/OpenAL32.dll" ]; then
		pushd openal-soft-1.16.0/build
		CFLAGS="-D_TIMESPEC_DEFINED" cmake -G "MSYS Makefiles" -DQT_QMAKE_EXECUTABLE=NOTFOUND -DCMAKE_BUILD_TYPE=Release -DALSOFT_REQUIRE_DSOUND=NO -DCMAKE_INSTALL_PREFIX=$QTOX_DIR/libs ..
		make
		make install
		popd
	fi
}

## ffmpeg
get_ffmpeg() {
	debug_out "ffmpeg: Obtaining version 2.7"
	if [ ! -f "ffmpeg-2.7.tar.bz2" ]; then
		wget http://ffmpeg.org/releases/ffmpeg-2.7.tar.bz2 -O ffmpeg-2.7.tar.bz2
		rm -rf ffmpeg-2.7
	fi

	debug_out "ffmpeg: Unpacking and patching for mingw"
	if [ ! -d "ffmpeg-2.7" ]; then
		tar -xvf ffmpeg-2.7.tar.bz2
		rm bin/avcodec-56.dll
		pushd ffmpeg-2.7
		patch -p1 < $QTOX_DIR/windows/ffmpeg-2.7-mingw.diff
		popd
	fi

	debug_out "ffmpeg: Configuring and compiling"
	if [ ! -f "bin/avcodec-56.dll" ]; then
		pushd ffmpeg-2.7
		./configure --target-os=mingw32 --prefix=$QTOX_DIR/libs \
			--enable-memalign-hack --disable-swscale-alpha --disable-programs --disable-doc --disable-postproc \
			--disable-avfilter --disable-avresample --disable-swresample --disable-protocols --disable-filters \
			--disable-network --disable-muxers --disable-sdl --disable-iconv --disable-bzlib --disable-lzma \
			--disable-zlib --disable-xlib --disable-encoders --enable-shared --disable-static --disable-yasm
		make
		make install
		popd
	fi
}

get_libsodium() {
	debug_out "libsodium: Getting version 1.0.12."
	if [ ! -f "libsodium-1.0.12-mingw.tar.gz" ]; then
		wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.12-mingw.tar.gz -O "libsodium-1.0.12-mingw.tar.gz"
		rm -rf libsodium-1.0.12-mingw
	fi

	debug_out "libsodium: Unpacking."
	if [ ! -d "libsodium-1.0.12-mingw" ]; then
		tar -xvf libsodium-1.0.12-mingw.tar.gz
	fi

	debug_out "libsodium: Copying binaries to target location."
	if [ ! -f "bin/libsodium-18.dll" ]; then
		cp -R libsodium-win32/bin ./
		cp -R libsodium-win32/include ./
		cp -R libsodium-win32/lib ./
	fi
}

get_pkg_config() {
	# get the files
	if [ ! -f "pkg-config_0.26-1_win32.zip" ]; then
		wget http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/pkg-config_0.26-1_win32.zip
	fi
	if [ ! -f "gettext-runtime_0.18.1.1-2_win32.zip" ]; then
		wget http://ftp.gnome.org/pub/gnome/binaries/win32/dependencies/gettext-runtime_0.18.1.1-2_win32.zip
	fi
	if [ ! -f "glib_2.28.8-1_win32.zip" ]; then
		wget http://ftp.acc.umu.se/pub/gnome/binaries/win32/glib/2.28/glib_2.28.8-1_win32.zip
	fi

	# if we’ve got them all...
	if [ -f "pkg-config_0.26-1_win32.zip" ] && [ -f "gettext-runtime_0.18.1.1-2_win32.zip" ] && [ -f "glib_2.28.8-1_win32.zip" ]; then
		echo "Success: Got all necessary packages."
		
		MINGW_PATH="$( dirname "$(which mingw-get)" )/.."
		echo "Installing to MinGW path: $MINGW_PATH"
		echo
		
		# pkg-config
		unzip -o pkg-config_0.26-1_win32.zip -d $MINGW_PATH
		
		# its dependencies
		unzip -o gettext-runtime_0.18.1.1-2_win32.zip -d $MINGW_PATH
		unzip -o glib_2.28.8-1_win32.zip -d $MINGW_PATH
		echo
		echo "Finished extracting the packages to their target location."
		echo "Checking pkg-config:"
		type pkg-config
		echo
		echo "Setting Environment Variable: PKG_CONFIG"
		setx PKG_CONFIG "$(which pkg-config)"
	else
		echo "Error: Failed to obtain necessary package(s) for installing pkg-config."
	fi
}

## setup pkg-config
check_pkg_config() {
	if ! type "pkg-config" >/dev/null 2>&1; then
		echo "pkg-config is missing from your system but required for later compilation."
		echo "Do you whish for it to be installed to MinGWs binary location?"

		read -p "Y/n (yes/no): " read_input
		read_input=$(echo $read_input | tr "[:upper:]" "[:lower:]")
		if [ "$read_input" == "n" ]; then
			debug_out "Option 'no' selected. Skipping installation."
		else
			debug_out "Option 'yes' selected. Downloading and installing pkg-config."
			echo
			get_pkg_config
		fi
	else
		echo "pkg-config has been found in your PATH:"
		which pkg-config
	fi
}

main() {
	# ask how to proceed
	echo
	if [ -d $QTOX_DIR/libs ]; then
		echo "The ./libs directory is already present in your qTox repository."
		echo "Remove ./libs and redownload/recompile dependencies and tools?"
		read -p "m/a/N (missing/all/no): " read_input
		read_input=$(echo $read_input | tr "[:upper:]" "[:lower:]")
		if [ "$read_input" == "a" ]; then
			debug_out "Parameter is a: Deleting existing libraries in ./libs ..."
			rm -rf $QTOX_DIR/libs
		elif [ "$read_input" == "n" ]; then
			debug_out "Parameter is n: Exiting with -1."
			exit -1
		elif [ "$read_input" == "m" ]; then
			debug_out "Parameter is m: Continuing without removing ./libs ..."
		else
			debug_out "Input invalid. Exiting with -1."
			exit -1
		fi
	else
		echo "You seem not to have the library directory present in your qTox repository."
		echo "Proceeding with adding that directory and filling it with useful content..."
	fi
	
	debug_out "Creating DIR: $QTOX_DIR/libs"
	mkdir -p $QTOX_DIR/libs
	cd $QTOX_DIR/libs
	
	echo
	echo
	echo " Checking tools: pkg-config..."
	echo

	check_pkg_config

	echo
	echo " Tool setup finished."
	echo
	echo
	echo " Continuing with library setup..."
	echo

	get_toxcore
	get_libqrencode
	get_openal
	get_ffmpeg
	get_libsodium
	
	echo
	echo " Library setup finised."
	echo
	echo
}

# start main :)
main